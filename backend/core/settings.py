"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url
import stat
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# API Key for frontend authentication
API_KEY = config('API_KEY', default='YIag3lrXubFRP7QfFgJ6NJimstcfVdiSmrwZCq9mcCM=')

DEBUG = config('DEBUG', default=False, cast=bool)

# Base allowed hosts and CORS settings
ALLOWED_HOSTS = ['api.qguideguide.com', 'qguideguide.com', 'www.qguideguide.com', 'qguideguide.onrender.com']
CSRF_TRUSTED_ORIGINS = [
    'https://api.qguideguide.com',
    'https://qguideguide.com',
    'https://www.qguideguide.com',
    'https://qguideguide.onrender.com',
]
CORS_ALLOWED_ORIGINS = [
    'https://qguideguide.com',
    'https://www.qguideguide.com',
    'https://api.qguideguide.com',
    'http://localhost:5173',
    'https://qguideguide.onrender.com',
]

# CORS settings that apply to both production and development
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = [
    'content-type',
    'x-api-key',
    'authorization',
    'accept',
    'etag',
    'cache-control',
    'last-modified',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-api-key',
    'cache-control',
    'if-match',
    'if-none-match',
    'if-modified-since',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Base middleware - same for both production and development
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS first
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add development settings when DEBUG is True
if DEBUG:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'api.qguideguide.com', 'qguideguide.com', 'www.qguideguide.com', 'qguideguide.onrender.com']
    # In development, allow all origins for easier testing
    # CORS_ORIGIN_ALLOW_ALL = True  # Removed
    CORS_ALLOW_CREDENTIALS = True
    # CORS_ORIGIN_ALLOW_ALL = True  # Removed
    
    # Additional CORS settings for development
    # CORS_EXPOSE_HEADERS = ['ETag', 'Cache-Control', 'Last-Modified']  # Updated
    # CORS_ALLOW_HEADERS = [  # Updated
    #     'accept',
    #     'accept-encoding',
    #     'authorization',
    #     'content-type',
    #     'dnt',
    #     'origin',
    #     'user-agent',
    #     'x-csrftoken',
    #     'x-requested-with',
    #     'x-api-key',
    #     'if-none-match',
    #     'if-modified-since',
    #     'cache-control'
    # ]
    
    # Disable SSL redirect in development
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
else:
    ALLOWED_HOSTS = [
        'api.qguideguide.com',
        'qguideguide.onrender.com',  
        '.qguideguide.com'  
    ]
    # In production, only allow specific origins
    CORS_ALLOWED_ORIGINS = [
        'https://qguideguide.com',
        'https://www.qguideguide.com',
        'https://qguideguide.onrender.com'  
    ]
    CORS_ALLOW_CREDENTIALS = True
    
    # Security settings for production
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # Additional security headers
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Content Security Policy
    CSP_DEFAULT_SRC = ("'self'",)
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'")
    CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'")
    CSP_IMG_SRC = ("'self'", "data:", "https:")
    CSP_CONNECT_SRC = ("'self'", "https://api.qguideguide.com")

# Cache settings with better error handling
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": config('REDIS_URL', default='redis://127.0.0.1:6379/0'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {
                "max_connections": 100,
                "retry_on_timeout": True,
                "socket_keepalive": True,
            },
            "SOCKET_CONNECT_TIMEOUT": 5,
            "SOCKET_TIMEOUT": 5,
            "RETRY_ON_TIMEOUT": True,
            "MAX_CONNECTIONS": 100,
            "IGNORE_EXCEPTIONS": True,  # Don't fail on Redis errors
        },
        "KEY_PREFIX": "qguideguide",
    }
}

# Redis connection health check
HEALTH_CHECK = {
    'cache_backend': 'django.core.cache.backends.dummy.DummyCache',
    'cache_timeout': 30,
}

# Don't cache CORS preflight requests
CACHE_MIDDLEWARE_SECONDS = 60 * 60 * 24  # 24 hours
CACHE_MIDDLEWARE_KEY_PREFIX = 'qguideguide'
CACHE_MIDDLEWARE_ANONYMOUS_ONLY = True

# Use Redis for session backend with fallback
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"  # Falls back to DB if Redis fails
SESSION_CACHE_ALIAS = "default"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'courses',
    'rest_framework_datatables',
    'core.apps.CoreConfig',
    'professors',
    'csp',
    'health_check',
    'health_check.db',
]

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_datatables.renderers.DatatablesRenderer',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'rest_framework_datatables.filters.DatatablesFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework_datatables.pagination.DatatablesPageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '20/hour',  
        'user': '100/hour',  
        'token_gen': '10/minute',  
        'api_endpoints': '50/hour',  
    },
}

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL'),
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files handling
STATIC_URL = '/static/'  # Required by Django
STATIC_ROOT = None
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
STATICFILES_DIRS = []  # Empty list since we don't use static files

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'django.cache': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
        'django_redis': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Ensure the logs directory exists
import os
if not os.path.exists('logs'):
    os.makedirs('logs')