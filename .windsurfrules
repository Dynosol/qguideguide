Workspace Rule for Code-Editing AI:

Stack Overview:

Frontend: React with Vite for bundling and development.

Backend: Django for the API and server-side logic.

Database: PostgreSQL hosted on Neon.tech.

Caching: Redis for caching (hosted on Render.com).

Deployment: Render.com for hosting both frontend and backend services.

Environment Setup:

Always use the Python virtual environment (venv) located in the backend/ directory for running the Django backend. Activate it using source backend/venv/bin/activate (Linux/Mac) or backend\venv\Scripts\activate (Windows).

Ensure all Python dependencies are installed using pip install -r backend/requirements.txt.

For the frontend, always use npm install or yarn install in the frontend/ directory to install dependencies.

Code Quality and Best Practices:

Follow Django best practices for backend development:

Use Django REST Framework (DRF) for API endpoints.

Keep views and serializers clean and modular.

Use Django’s ORM efficiently for database queries.

Implement proper error handling and logging.

Follow React best practices for frontend development:

Use functional components with hooks (e.g., useState, useEffect).

Keep components small, reusable, and well-documented.

Use Vite’s built-in optimizations for performance.

Ensure TypeScript is used if the project is configured for it.

Always validate and sanitize user inputs on both frontend and backend.

Use environment variables for sensitive data (e.g., API keys, database credentials) and ensure they are stored securely.

Database and Caching:

Use Neon.tech’s PostgreSQL database for all data storage.

Optimize database queries and use indexing where necessary.

Use Redis for caching frequently accessed data (e.g., session storage, API responses).

Ensure database migrations are created and applied correctly using Django’s makemigrations and migrate commands.

Deployment and Hosting:

Ensure the Django backend is configured for production (e.g., DEBUG=False, proper static file handling, and Gunicorn for serving).

Use Render.com’s environment variables for deployment configuration.

Ensure the React frontend is built using npm run build or yarn build and served via Render.com’s static site hosting.

Test all changes locally before deploying to Render.com.

Code Changes and Implementation:

Always propose the most efficient, maintainable, and scalable solution for any code changes.

Write clear, concise, and well-documented code.

Use Git for version control and follow a branching strategy (e.g., feature branches, pull requests).

Include unit tests and integration tests for new features or changes.

Ensure backward compatibility when making changes to existing functionality.

Error Handling and Debugging:

Implement proper error handling for both frontend and backend.

Use Django’s logging framework for backend errors and React’s error boundaries for frontend errors.

Provide meaningful error messages for debugging.

Performance Optimization:

Optimize frontend performance using Vite’s built-in tools (e.g., code splitting, tree shaking).

Optimize backend performance by minimizing database queries and using caching effectively.

Monitor and optimize load times for both frontend and backend.

Security:

Ensure all API endpoints are secure (e.g., use authentication and authorization).

Use HTTPS for all communications.

Regularly update dependencies to patch security vulnerabilities.

Documentation:

Document all new features, changes, and configurations.

Update the README file with setup and deployment instructions.

Include inline comments for complex logic or non-obvious code.

